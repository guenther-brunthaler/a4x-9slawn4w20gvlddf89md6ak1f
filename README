An ARCFOUR-variant for the POSIX shell.

The utility encrypts or decrypts standard input to standard output, using the path name of a user-provided key file as its only non-option argument.

Either option -e (for encryption) or -d (for decryption) is mandatory in order to specify the operation to be performed.

A 512-bit random salt will be added to every encryption, so that it should not be a problem to encrypt different messages with the same encryption key, even if the messages are similar.

Also, a message authentication code (encrypt-then-MAC) will be added to every encrypted message, detecting any manipulation or corruption of the message.

Here are the algorithmic changes made to the original ARCFOUR algorithm:

* The key setup has been changed. All bytes of the key are processed in the same way as the first 256 octets, even if it is longer than 256 octets.

* The key will be preprocessed before feeding it into the normal ARCFOUR key setup algorithm. First, it will be appended with its own length as a binary little-endian base-128 number where the most significant bit of each octet is "1" except for the last octet of the number. Second, an instance counter (starting with 1) follows this length encoding which is encoded in the same way as the length. At least one instance of the key (including counter + length) will be fed into the key setup. But after this, more instances (with increasing counter values) will be fed also, until at least 256 octets have been fed into the key setup algorithm. Only whole instances are fed - feeding is not stopped immediately after the 256th octet has been fed.

* After the key setup, the first 3072 octets of the pseudorandom-sequence generated by the ARCFOUR algorithm are thrown away. This is similar to ARCFOUR-drop-768, except that 4 times as many initial output octets are thrown away.

The above algorithm is not actually used to encrypt anything. It is instead only used to create three or four binary strings of different sizes which will be used for different purposes as explained later.

The three or four strings generated by obtaining octets from the ARCFOUR PRNG (initialized by the user-provided key as explained above) thrice in a row will be named as follows: 256 octets <salt_encryption>, 64 octets <mac_basis>, 256 octets <payload_encryption>, and optionally (only for encryption operation) 64 octets <salt_basis>.

The encrypted message starts with a 512-bit encrypted random salt. The salt is encrypted using the ARCFOUR-XA-DROP3072 algorithm (explained below) using <salt_encryption> as the key.

The salt itself is generated in the same way as the MAC (see below), except that <salt_basis> is encrypted. The key setup is feeded by at least 64 octets from /dev/random or /dev/urandom, which are repeated as often as necessary to feed at least 256 octets into the key setup). After this, more data are fed into the key setup: At least the current localtime() and clock(). But if possible also the local hostname, current user name and user id, and a per-user counter which is incremented at every encryption invocation (being initialized randomly at the first invocation).

After the encrypted salt, the encrypted payload follows. It is also encrypted with ARCFOUR-XA-DROP3072, and uses a key which consists of the concatenation of the (decrypted) salt, followed by  <payload_encryption>, followed by a second copy of the decrypted salt.

After the last byte of the encrypted payload, the MAC follows as a 512 bit (64 octet) string.

The MAC is calculated as follows: All octets of the encrypted salt as well as all octets of the encrypted payload are fed into the standard ARCFOUR key setup algorithm (except that all bytes are processed and not just the first 256 octets). Finally, the MAC itself is calculated by ARCFOUR-XA-DROP3072-encrypting <mac_basis>.

Now for definition of the ARCFOUR-XA-DROP3072 algorithm. First, after a standard (except that all octets of the key shall be processed) ARCFOUR key-setup for that instance, the first 3072 octets generated by the standard ARCFOUR algorithm are dropped and thrown away. After that, for every input octet to be encrypted, two pseudorandom octets are generated by the standard ARCFOUR algorithm. In order to encrypt the input octet, it is XORed with the first PRNG octet and then the second PRNG octet is added, (ignoring any overflow). Decryption therefore exists of subtracting the second PRNG octet first, then XORing the first PRNG octet.
